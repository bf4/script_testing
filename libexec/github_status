#!/usr/bin/env bash
#
# Get or set github status for a PR
#
# Required:
#   https://github.com/settings/tokens/new
#   GITHUB_REPO_STATUS_TOKEN with 'repo' or 'repo:status' OAuth scope
#
# Optional:
#   GITHUB_USER_AGENT
#   DEBUG
#
# GitHub Status API Docs:
#   https://developer.github.com/v3/repos/statuses/
#
# Example get status:
#   $ bin/github_pr_status get 1236 -owner xxx -repo xxx
#
#   pr 1236, sha 82b8403375e9ff0a4d32d2fe09b34a99f0ddad63
#   state success
#   description Your tests passed on CircleCI!
#   target_url https://circleci.com/gh/:owner/:repo/6735
#   context ci/circleci
#
# Example create status (-url is optional)
#   $ bin/github_pr_status create 1234 -owner xxx -repo xxx -state success -desc "Good Job" -context "benjamin_approves" -url https://circleci.com/gh/:owner/:repo/1337
#
#   pr 1234, sha 2a6edbf258d494f39d85905ae12cf8d08f91dd10
#   url https://api.github.com/repos/:owner/:repo/statuses/2a6edbf258d494f39d85905ae12cf8d08f91dd10
#   state success
#   description Your tests passed on CircleCI!
#   target_url https://circleci.com/gh/:owner/:repo/1337
#   context ci/circleci

set -euo pipefail
IFS=$'\n\t'
# Influenced by https://dev.to/thiht/shell-scripts-matter
# And see https://github.com/bf4/Notes/wiki/Shell-Scripting

DEBUG="${DEBUG:-false}"
info()    { echo "[INFO] $*" >&2 ; }
error()   { echo "[ERROR] $*" >&2 ; }
fatal()   { echo "[ERROR] $*" >&2 ; exit 1 ; }
debug()   { if [ "$DEBUG" = "true" ]; then echo "[DEBUG] $*" >&2 ; fi ; }

# Always log finish, bash pseudo-signal: EXIT
# Usage:
#   trap finish EXIT
# Optional:
#   Will execute a 'cleanup' function if defined.
finish() {
  info "END Running script: ${0##*/}"
  command -v cleanup &>/dev/null && cleanup
}

# Log errors, if any, bash pseudo-signal: ERR
# Usage:
#   trap 'finish_error $LINENO' ERR
finish_error()  {
  errcode=$?
  error "END ERROR Running script: ${0##*/}:$1: exited with '${errcode}'."
}

create_status() {
  # begin validate options
  valid=0
  if [ -z "${owner}" ]; then error "-owner is required" ; ((valid+=1)); fi
  if [ -z "${repo}" ]; then error "-repo is required" ; ((valid+=1)); fi
  if [ -z "${state}" ]; then error "-state is required" ; ((valid+=1)); fi
  if [ -z "${description}" ]; then error "-desc is required" ; ((valid+=1)); fi
  if [ -z "${context}" ]; then error "-context is required" ; ((valid+=1)); fi
  if [ "$valid" -ne 0 ]; then fatal "Missing required options" ; exit 1; fi
  # end validate options
  local pr_number_or_sha
  pr_number_or_sha="$1"
  local ref
  ref="$(get_sha "$pr_number_or_sha")"
  url="https://api.github.com/repos/${owner}/${repo}/statuses/${ref}"
  info "pr ${pr_number_or_sha}, sha ${ref}"
  curl -X POST --silent \
  -H "Accept: application/vnd.github.v3+json" \
  -H "Content-Type: application/json; charset=utf-8" \
  -H "Authorization: token ${GITHUB_REPO_STATUS_TOKEN}" \
  -H "User-Agent: ${GITHUB_USER_AGENT}" \
  -d "$(create_payload)" \
  "$url" --silent \
  | python -c 'import json,sys;obj=json.load(sys.stdin); print "url", obj["url"]; print "state", obj["state"]; print "description", obj["description"]; print "target_url", obj["target_url"]; print "context", obj["context"]'
}

create_payload() {
  if [ -z "$target_url" ]; then
      printf '
    {
     "state": "%s",
     "description": "%s",
     "context": "%s"
    }
    '  "$state" "$description" "$context"
  else
      printf '
    {
     "state": "%s",
     "description": "%s",
     "target_url": "%s",
     "context": "%s"
    }
    '  "$state" "$description" "$target_url" "$context"
  fi
}

get_status() {
  # begin validate options
  valid=0
  if [ -z "${owner}" ]; then error "-owner is required" ; ((valid+=1)); fi
  if [ -z "${repo}" ]; then error "-repo is required" ; ((valid+=1)); fi
  if [ "$valid" -ne 0 ]; then fatal "Missing required options" ; fi
  # end validate options
  local pr_number_or_sha
  pr_number_or_sha="$1"
  local ref
  ref="$(get_sha "$pr_number_or_sha")"
  local url;
  url="https://api.github.com/repos/${owner}/${repo}/commits/${ref}/status"
  debug "pr ${pr_number_or_sha}, sha ${ref}"
  curl -X GET --silent \
  -H "Accept: application/vnd.github.v3+json" \
  -H "Authorization: token ${GITHUB_REPO_STATUS_TOKEN}" \
  -H "User-Agent: ${GITHUB_USER_AGENT}" \
  "$url" \
  | print_statuses
}

# Takes one argument that make be either an integer PR number git ref
# GitHub statuses are applied per sha.  This function is a convenience
# to allow looking up the current sha for a PR
get_sha() {
  local pr_number_or_sha
  pr_number_or_sha="$1"
  if git fetch -q origin "+refs/pull/${pr_number_or_sha}/head"; then
    cut -d'	' -f1 .git/FETCH_HEAD | head -1 # delimiter is a tab
  else
    echo "$pr_number_or_sha"
  fi
}

print_statuses() {
  printf "pr=%s" "$pr"
  python -c 'import json,sys;obj=json.load(sys.stdin)
print "  state=", obj["state"], "  repo=", obj["repository"]["full_name"], "  sha=", obj["sha"]
for status in obj["statuses"]:
    print "    "
    print "    state\t", status["state"]
    print "    context\t", status["context"]
    print "    description\t", status["description"]
    print "    target_url\t", status["target_url"]
  '
}

show_help() {
  abort=${abort:0}
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0" >&$((abort+1))
  exit "$abort"
}

# Remove temporary files; unset variables
cleanup() {
  unset cmd
  unset pr
  unset owner
  unset repo
  unset context
  unset state
  unset description
  unset target_url
  rm -f .git/FETCH_HEAD
}

if [ -z "$GITHUB_REPO_STATUS_TOKEN" ]; then error "GITHUB_REPO_STATUS_TOKEN not found in env"; abort=1; show_help; fi
if [ -z "${1:-}" ]; then error "No command given"; abort=1; show_help; fi

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
################################### main
trap 'finish' EXIT
trap 'finish_error $LINENO' ERR

cmd="$1"
pr=""
owner=""
repo=""
context=""
state=""
description=""
target_url=""
GITHUB_USER_AGENT="${GITHUB_USER_AGENT:-ExampleNameCIStatus}"

while [ $# -gt 1 ]; do
  debug "Processing '$1'. All $# options are: ${*}"
  case "$1" in
    -owner)
      shift; owner="$1"; shift
      debug "owner=$owner"
      true
      ;;

    -repo)
      shift; repo="$1"; shift
      debug "repo=$repo"
      true
      ;;

    -context)
      shift; context="$1"; shift
      debug "context=$context"
      true
      ;;

    -desc|-description)
      shift; description="$1"; shift
      debug "description=$description"
      true
      ;;

    -state)
      shift; state="$1"; shift
      debug "state=$description"
      case "$state" in
        pending|success|error|failure)
          true
          ;;
        *)
          fatal "Invalid State: '${state}'"
          ;;

      esac
      ;;

    -url)
      shift; target_url="$1"; shift
      debug "target_url=$description"
      true
      ;;

    get|create)
      cmd="$1"; shift
      pr="$1"; shift
      debug "cmd=$cmd pr=$pr"
      ;;

    *)
      if [ $# -gt 1 ]; then
        debug "Skipping '$1'"
        true
      else
        fatal "Missing [cmd] [pr number]. got ${*}"
      fi
  esac
done

debug "Final $# Options are: ${*}"

case "$cmd" in
  get)
    get_status "$pr"
    ;;
  create)
    create_status "$pr"
    ;;
  help)
    show_help
    ;;

  *)
    error "Don't know $cmd"
    abort=1
    show_help
    ;;
esac
fi
